base_dir = "D:/Data/Tong/MAARS/";
//base_dir = "/home/tong/Documents/code/MAARS/";
//base_dir = "/home/hadim/Documents/phd/dev/MAARS/";
//base_dir = "/Volumes/Macintosh/Documents/MAARS/";

addClassPath(base_dir + "target/MAARS_-1.0.jar");

//dep_base_dir = "/home/tong/.m2/repository/";
//dep_base_dir = "/Users/tongli/.m2/repository/";
//addClassPath(dep_base_dir +"sc/fiji/TrackMate_/2.7.2/TrackMate_-2.7.2.jar");
//addClassPath(dep_base_dir +"net/imglib2/imglib2/2.2.0/imglib2-2.2.0.jar");
//addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm/0.2.0/imglib2-algorithm-0.2.0.jar");
//addClassPath(dep_base_dir +"net/imagej/imagej-common/0.12.2/imagej-common-0.12.2.jar");
//addClassPath(dep_base_dir +"net/imglib2/imglib2-ij/2.0.0-beta-29/imglib2-ij-2.0.0-beta-29.jar");
//addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm-fft/0.1.1/imglib2-algorithm-fft-0.1.1.jar");
//addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm-gpl/0.1.2/imglib2-algorithm-gpl-0.1.2.jar");
//addClassPath(dep_base_dir +"net/sf/opencsv/opencsv/2.0/opencsv-2.0.jar");
//addClassPath(dep_base_dir +"org/scijava/scijava-common/2.38.2/scijava-common-2.38.2.jar");
//addClassPath(dep_base_dir +"net/sf/jgrapht/jgrapht/0.8.3/jgrapht-0.8.3.jar");
//addClassPath(dep_base_dir +"edu/mines/mines-jtk/20100113/mines-jtk-20100113.jar");
//addClassPath(dep_base_dir +"gov/nist/math/jama/1.0.3/jama-1.0.3.jar");

import au.com.bytecode.opencsv.CSVWriter;
import java.util.List;
import fiji.plugin.maars.maarslib.*;
import fiji.plugin.maars.maarslib.MaarsMainDialog;
import fiji.plugin.maars.maarslib.MaarsParameters;
import fiji.plugin.maars.maarslib.ExplorationXYPositions;
import fiji.plugin.maars.utils.FileUtils;
import mmcorej.*;
import org.micromanager.api.*;
import ij.*;
import java.io.IOException;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.util.HashMap;

double calibration = mm.core().getPixelSizeUm();
mmc.setAutoShutter(false);
mmc.waitForDevice(mmc.getShutterDevice());

print("Create main window");
MaarsMainDialog md = null;

md = new MaarsMainDialog(mm, mmc, base_dir + "maars_config.xml");

print("Show main window");
md.show();

while(!md.isOkClicked()) {
	Thread.sleep(1000);
}

if(md.isOkClicked()) {
	start = System.currentTimeMillis();
	print("start "+start);
	MaarsParameters param = null;
	autofocus = mm.getAutofocus();
	param = md.getParameters();
	mmc.setOriginXY(mmc.getXYStageDevice());
	int nbXField = param.getFieldNb(MaarsParameters.X_FIELD_NUMBER);
	int nbYField = param.getFieldNb(MaarsParameters.Y_FIELD_NUMBER);
	print("nb x field "+nbXField+" nb y field "+nbYField);
	
	if (nbXField * nbYField != 0){
		ExplorationXYPositions explo = new ExplorationXYPositions(nbXField,
														nbYField,
														(double) mmc.getImageWidth()*calibration,
														(double) mmc.getImageHeight()*calibration);
		for (int i = 0; i < explo.length(); i++) {
			print("x : "+explo.getX(i)+" y : "+explo.getY(i));
			double xPos = explo.getX(i);
			double yPos = explo.getY(i);
			
			mm.core().setXYPosition(xPos,yPos);
			
			MaarsAcquisitionForSegmentation mas = new MaarsAcquisitionForSegmentation(md,
					xPos,
					yPos);
	
			mmc.waitForDevice(mmc.getXYStageDevice());
	
			autofocus.fullFocus();
	
			HashMap params = mas.getParametersFromConf(param);
			mas.setParameters(params);
			//--------------------------BF acquisition-----------------------------//
			mas.acquire(true);
			//--------------------------segmentation-----------------------------//
			MaarsSegmentation ms = new MaarsSegmentation(param,
				xPos,
				yPos);
			ms.segmentation();
			if(ms.roiDetected()){
			//----------------if got ROI, start fluo-acquisition --------//
				MaarsFluoAnalysis mfa = new MaarsFluoAnalysis(param, ms.getSegPombeParam(), xPos, yPos);
				MaarsAcquisitionForFluoAnalysis mafa = new MaarsAcquisitionForFluoAnalysis(md,
																xPos,
																yPos,
																mfa.getSetOfCells());
//////////////////////////multiple snapshot per field//////////////////////////////
				if(param.useDynamic()) {
					double timeInterval = 
						Double.parseDouble(param.getFluoParameter(MaarsParameters.TIME_INTERVAL));
					double startTime = System.currentTimeMillis();
					int frame = 0;
					double timeLimit = 
						Double.parseDouble(param.getFluoParameter(MaarsParameters.TIME_LIMIT))
						* 60 * 1000;
					while (System.currentTimeMillis() - startTime <= timeLimit)
						{
							double beginAcq = System.currentTimeMillis();

							String channels = param.getUsingChannels();
							String[] arrayChannels = channels.split(",", -1);
							for (String channel:arrayChannels) {
								ImagePlus fluoImage = mafa.acquire(true, frame, channel);
								mfa.setFluoImage(fluoImage);
								mfa.createCellChannelFactory(channel);
								mfa.setCurrentFrame(frame);
								mfa.zProject();
								mfa.cropAllCells();
								mfa.analyzeEachCell();
							}
							mfa.getSetOfCells().closeRoiManager();
							frame++;
							double acqTook = System.currentTimeMillis() - beginAcq;
							Thread.sleep((long) (timeInterval - acqTook));	
							acqNameFluo = null;
							fluoImage = null;	
						}
////////////////////////////one snapshot per field/////////////////////////////////																			
				}else {
					int frame = 0;
					String channels = param.getUsingChannels();
					String[] arrayChannels = channels.split(",", -1);
					for (String channel:arrayChannels) {
						ImagePlus fluoImage = mafa.acquire(true, frame, channel);
						mfa.setFluoImage(fluoImage);
						mfa.createCellChannelFactory(channel);
						mfa.setCurrentFrame(frame);
						mfa.zProject();
						mfa.cropAllCells();
						mfa.analyzeEachCell();
					}
					mfa.getSetOfCells().closeRoiManager();
					acqNameFluo = null;
					fluoImage = null;
				}
///////////////////////////save cropped images//////////////////////////////////////
				if (Boolean.parseBoolean(param.getFluoParameter(
					MaarsParameters.SAVE_FLUORESCENT_MOVIES))) {
					mfa.saveCroppedImgs();
				}
				// close roi manager
				// mfa.getSetOfCells().closeRoiManager();
				mas.setParameters(params);
			}
		}
		mmc.setAutoShutter(true);
		mmc.waitForDevice(mmc.getShutterDevice());
		print("end "+System.currentTimeMillis());
		print("it took "+(System.currentTimeMillis()-start));
		print("DONE.");
	}else{
		print("Session aborted, 0 field to analyse");
	}
	}else{
		print("Session aborted, click 'OK' to start analyse.");
}
