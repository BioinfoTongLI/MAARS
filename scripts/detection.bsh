import fiji.plugin.trackmate.Spot;
import fiji.plugin.trackmate.detection.DetectionUtils;
import fiji.plugin.trackmate.detection.DogDetector;
import fiji.plugin.trackmate.detection.LogDetector;
import fiji.plugin.trackmate.util.TMUtils;
import fiji.plugin.trackmate.Model;
import fiji.plugin.trackmate.Settings;
import fiji.plugin.trackmate.detection.LogDetectorFactory;
import fiji.plugin.trackmate.features.FeatureFilter;
import fiji.plugin.trackmate.TrackMate;
import ij.IJ;
import ij.ImagePlus;
import ij.plugin.ZProjector;
import fiji.plugin.trackmate.visualization.hyperstack.HyperStackDisplayer;
import fiji.plugin.trackmate.SelectionModel;

//ImagePlus imp = IJ.openImage("/home/tong/Documents/Movies/best/movie_X0_Y0/rescaled_DUP_Segment_MMStack_Pos0.ome_FLUO.tif");
ImagePlus imp = IJ.openImage("D:/Data/Tong/Movies/0_FLUO/MMStack_Pos0.ome.tif");
ZProjector projector = new ZProjector();
projector.setMethod(ZProjector.MAX_METHOD);
projector.setImage(imp);
projector.doProjection();

ImagePlus zprojection = projector.getProjection();
zprojection.show();

Model model = new Model();

Settings settings = new Settings();

settings.setFrom(zprojection);

settings.detectorFactory = new LogDetectorFactory();
Map detectorSettings = new HashMap();
detectorSettings.put("DO_SUBPIXEL_LOCALIZATION", true);
detectorSettings.put("RADIUS", (double) 10);
detectorSettings.put("TARGET_CHANNEL", 1);
detectorSettings.put("THRESHOLD", (double) 0);
detectorSettings.put("DO_MEDIAN_FILTERING", false);
settings.detectorSettings = detectorSettings;

FeatureFilter filter1 = new FeatureFilter("QUALITY", 1, true);
settings.addSpotFilter(filter1);

TrackMate trackmate = new TrackMate(model, settings);
print("Trackmate created");

trackmate.execDetection();
print("execDetection done");

trackmate.execInitialSpotFiltering();
print("execInitialSpotFiltering done");

trackmate.computeSpotFeatures(true);
print("computeSpotFeatures done");

trackmate.execSpotFiltering(true);
print("execSpotFiltering done");

print("Found " + trackmate.getModel().getSpots().getNSpots(false) + " spots");

//for(Spot spot : trackmate.getModel().getSpots().iterable(true)) {
 //  print(spot.getFeature(Spot.RADIUS));
//}

// Show
SelectionModel selectionModel = new SelectionModel(model);
HyperStackDisplayer displayer= new HyperStackDisplayer(model, selectionModel, zprojection);
displayer.render();
displayer.refresh();