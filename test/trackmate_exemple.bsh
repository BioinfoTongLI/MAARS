package fiji.plugin.maars.cellstateanalysis;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

import fiji.plugin.trackmate.visualization.hyperstack.HyperStackDisplayer;
import fiji.plugin.trackmate.visualization.hyperstack.SpotEditTool;
import fiji.plugin.trackmate.SelectionModel;
import fiji.plugin.trackmate.Spot;
import fiji.plugin.trackmate.Model;
import fiji.plugin.trackmate.Settings;
import fiji.plugin.trackmate.detection.LogDetectorFactory;
import fiji.plugin.trackmate.features.FeatureFilter;
import fiji.plugin.trackmate.TrackMate;
import ij.IJ;
import ij.ImagePlus;
import ij.measure.Calibration;
import ij.plugin.ZProjector;

//ImagePlus imp = IJ.open("MAX_MMStack_Pos0.ome.tif");
//ImagePlus imp = IJ.openImage("/Users/theoli89/Desktop/curioData/Virtual/movie_X0_Y0_FLUO/0/1.tif");
//ImagePlus imp = IJ.getImage();

for (int i = 1;i<2;i++){
	ImagePlus imp = IJ.openImage("/home/tong/Documents/movies/102-s4/movie_X0_Y0_FLUO/croppedImgs/"+i+".tif");
	ZProjector projector = new ZProjector();
	projector.setMethod(ZProjector.MAX_METHOD);
	projector.setImage(imp);
	projector.doProjection();
	imp = projector.getProjection();
	int nSpotsDetected = 0;
	double threshold = 120;
	double low = 0;
	double high = threshold;
	
	//int nbCell = 300;
	int maxNbSpotPerCell = 2;
	//int nbSpotPerField = nbCell * 0.3 * maxNbSpotPerCell + nbCell * 0.7 * 1;
	
	while(nSpotsDetected != maxNbSpotPerCell){
		//print(nSpotsDetected +"_"+ nbSpotPerField);
		Model model = new Model();
		
		Settings settings = new Settings();
		settings.setFrom(imp);
		
		settings.detectorFactory = new LogDetectorFactory();
		Map detectorSettings = new HashMap();
		detectorSettings.put("DO_SUBPIXEL_LOCALIZATION", true);
		detectorSettings.put("RADIUS", (double) 0.25);
		detectorSettings.put("TARGET_CHANNEL", 1);
		detectorSettings.put("THRESHOLD", (double) threshold);
		detectorSettings.put("DO_MEDIAN_FILTERING", false);
		settings.detectorSettings = detectorSettings;
		
		FeatureFilter filter1 = new FeatureFilter("QUALITY", 1, true);
		settings.addSpotFilter(filter1);
		
		TrackMate trackmate = new TrackMate(model, settings);
		//print("Trackmate created");
		
		trackmate.execDetection();
		//print("execDetection done");
		
		trackmate.execInitialSpotFiltering();
		//print("execInitialSpotFiltering done");
		
		trackmate.computeSpotFeatures(true);
		//print("computeSpotFeatures done");
		
		trackmate.execSpotFiltering(true);
		//print("execSpotFiltering done");
		
		//print("- get results");
		
		//SelectionModel sm = new SelectionModel(model);
		//HyperStackDisplayer displayer =  new HyperStackDisplayer(model, sm, imp);
		//displayer.render();
		//displayer.refresh();
		
		nSpotsDetected = trackmate.getModel().getSpots().getNSpots(false);
		print("Found " + nSpotsDetected + " spots; Threshold = " + threshold);
		if (nSpotsDetected < maxNbSpotPerCell){
			low = threshold;
			threshold = low - (high - low) /2;
		}else if (nSpotsDetected > maxNbSpotPerCell){
			high = threshold;
			threshold = high + (high - low) /2;
		}else{
			targetThreshold = threshold;
			print("Target threshold = " + targetThreshold);
		}
		
		//for (Spot spot : trackmate.getModel().getSpots().iterable(false)) {
		//	print(spot.getFeatures());
		//}
		//imp.close();
	} 
}