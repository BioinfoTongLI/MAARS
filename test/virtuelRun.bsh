//base_dir = "D:/Data/Tong/MAARS/";
//base_dir = "/home/tong/Documents/code/MAARS/";
//base_dir = "/home/hadim/Documents/phd/dev/MAARS/";
base_dir = "/Volumes/Macintosh/Documents/MAARS/";

addClassPath(base_dir + "target/MAARS_-1.0.jar");
//dep_base_dir = "/home/tong/.m2/repository/";
dep_base_dir = "/Users/tongli/.m2/repository/";
//addClassPath(dep_base_dir +"sc/fiji/TrackMate_/2.7.2/TrackMate_-2.7.2.jar");
addClassPath(dep_base_dir +"net/imglib2/imglib2/2.2.0/imglib2-2.2.0.jar");
addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm/0.2.0/imglib2-algorithm-0.2.0.jar");
addClassPath(dep_base_dir +"net/imagej/imagej-common/0.12.2/imagej-common-0.12.2.jar");
addClassPath(dep_base_dir +"net/imglib2/imglib2-ij/2.0.0-beta-29/imglib2-ij-2.0.0-beta-29.jar");
addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm-fft/0.1.1/imglib2-algorithm-fft-0.1.1.jar");
addClassPath(dep_base_dir +"net/imglib2/imglib2-algorithm-gpl/0.1.2/imglib2-algorithm-gpl-0.1.2.jar");
addClassPath(dep_base_dir +"net/sf/opencsv/opencsv/2.0/opencsv-2.0.jar");
addClassPath(dep_base_dir +"org/scijava/scijava-common/2.38.2/scijava-common-2.38.2.jar");
addClassPath(dep_base_dir +"net/sf/jgrapht/jgrapht/0.8.3/jgrapht-0.8.3.jar");
addClassPath(dep_base_dir +"edu/mines/mines-jtk/20100113/mines-jtk-20100113.jar");
addClassPath(dep_base_dir +"gov/nist/math/jama/1.0.3/jama-1.0.3.jar");

//reloadClasses();

import au.com.bytecode.opencsv.CSVWriter;
import java.util.List;
import fiji.plugin.maars.maarslib.*;
import fiji.plugin.maars.maarslib.MaarsMainDialog;
import fiji.plugin.maars.maarslib.AllMaarsParameters;
import fiji.plugin.maars.maarslib.ExplorationXYPositions;
import mmcorej.CMMCore;
import org.micromanager.*;
import ij.*;
import java.io.IOException;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.util.HashMap;
import fiji.plugin.maars.cellstateanalysis.Cell;
import ij.ImagePlus;

double calibration = gui.getMMCore().getPixelSizeUm();
//mmc.setAutoShutter(false);

print("Create main window");
MaarsMainDialog md = null;
try {
	md = new MaarsMainDialog(gui, mmc, base_dir + "maars_config.txt");
} catch (IOException e) {
	gui.message("Error");
}

print("Show main window");

md.show();

while(md.isVisible()) {
	gui.sleep(1000);
}

if(md.isOkClicked()) {
	start = System.currentTimeMillis();
	gui.message("start "+start);
	AllMaarsParameters param = null;
	autofocus = gui.getAutofocus();
	param = md.getParameters();
	int nbXField = param
						.getParametersAsJsonObject()
						.get(AllMaarsParameters.EXPLORATION_PARAMETERS)
						.getAsJsonObject()
						.get(AllMaarsParameters.X_FIELD_NUMBER)
						.getAsInt();
	int nbYField = param
						.getParametersAsJsonObject()
						.get(AllMaarsParameters.EXPLORATION_PARAMETERS)
						.getAsJsonObject()
						.get(AllMaarsParameters.Y_FIELD_NUMBER)
						.getAsInt();
	
	gui.message("nb x field "+nbXField+" nb y field "+nbYField);

	if (nbXField * nbYField != 0){
	ExplorationXYPositions explo = new ExplorationXYPositions(nbXField,
													nbYField,
													(double) mmc.getImageWidth()*calibration,
													(double) mmc.getImageHeight()*calibration);

	ImagePlus fluoImage = null;
	for (int i = 0; i < explo.length(); i++) {
		gui.message("x : "+explo.getX(i)+" y : "+explo.getY(i));
		double xPos = explo.getX(i);
		double yPos = explo.getY(i);
		
		gui.setXYStagePosition(xPos,yPos);
		
		MaarsAcquisitionForSegmentation mas = new MaarsAcquisitionForSegmentation(md,
				xPos,
				yPos);

		mmc.waitForDevice(mmc.getXYStageDevice());

		HashMap params = mas.getParametersFromConf(param);
		mas.setParameters(params);

		MaarsSegmentation ms = new MaarsSegmentation(param,
				xPos,
				yPos);
		ms.segmentation();
		ms.writeUsedConfig();
		
		if (ms.roiDetected()){
			String fluoFolder = AllMaarsParameters.convertPath(param
													.getParametersAsJsonObject()
													.get(AllMaarsParameters.GENERAL_ACQUISITION_PARAMETERS)
													.getAsJsonObject().get(AllMaarsParameters.SAVING_PATH)
													.getAsString()
													+ "/movie_X"
													+ Math.round(xPos)
													+ "_Y"
													+ Math.round(yPos) +"_FLUO");
			MaarsFluoAnalysis mfa = new MaarsFluoAnalysis(param, ms.getSegmentationObject(), xPos, yPos);
			MaarsAcquisitionForFluoAnalysis mafa = new MaarsAcquisitionForFluoAnalysis(md,
															xPos,
															yPos,
															mfa.getSetOfCells());
		int frame = 0;
		while(frame<2){
			String channels = param.getParametersAsJsonObject()
					.get(AllMaarsParameters.FLUO_ANALYSIS_PARAMETERS)
					.getAsJsonObject().get(AllMaarsParameters.FLUO_CHANNELS)
					.getAsString();
			String[] arrayChannels = channels.split(",", -1);
			for (String channel:arrayChannels) {
				String acqNameFluo = acqNameFluo + "/" + frame + "_" + channel;
				fluoImage = IJ.openImage(fluoFolder + "/"
					+frame+ "_" + channel +"/MMStack_Pos0.ome.tif");
				mfa.setFluoImage(fluoImage);
				mfa.zProject();
				mfa.cropAllCells();
				mfa.analyzeEntireFieldReturnListSp(frame,channel);
			}
			acqNameFluo = null;
			fluoImage = null;
			// close roi manager
			mfa.getSetOfCells().closeRoiManager();
			mas.setParameters(params);
			frame++;
		}
		if (param.getParametersAsJsonObject()
					.get(AllMaarsParameters.FLUO_ANALYSIS_PARAMETERS)
					.getAsJsonObject()
					.get(AllMaarsParameters.SAVE_FLUORESCENT_MOVIES)
					.getAsBoolean()) {
				mfa.saveCroppedImgs();
		}
		}
//		mmc.setAutoShutter(true);
//		mmc.waitForDevice(mmc.getShutterDevice());
		gui.message("end "+System.currentTimeMillis());
		gui.message("it took "+(System.currentTimeMillis()-start));
		gui.message("DONE.");
	}

	}else{
		gui.message("Session aborted, 0 field to analyse");
	}
	}else{
		gui.message("Session aborted, click 'OK' to start analyse.");
}
