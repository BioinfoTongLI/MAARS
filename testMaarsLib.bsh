base_dir = "D:/Data/Tong/MAARS/";
//base_dir = "/home/tong/Documents/code/MAARS/";
//base_dir = "/home/hadim/Documents/phd/dev/MAARS/";
//base_dir = "/Users/theoli89/Documents/MAARS/";

addClassPath(base_dir + "MaarsLib/target/MaarsLib-1.0.jar");
addClassPath(base_dir + "CellsBoundaries/target/CellsBoundaries-1.0.jar");
addClassPath(base_dir + "CellStateAnalysis/target/CellStateAnalysis-1.0.jar");

import fiji.plugin.maars.maarslib.*;
import fiji.plugin.maars.maarslib.MaarsMainDialog;
import fiji.plugin.maars.maarslib.AllMaarsParameters;
import fiji.plugin.maars.maarslib.ExplorationXYPositions;
import mmcorej.*;
import org.micromanager.api.*;
import ij.*;
import java.io.IOException;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import java.util.HashMap;
import fiji.plugin.maars.cellstateanalysis.Cell;

double calibration = gui.getMMCore().getPixelSizeUm();
mmc.setAutoShutter(false);
mmc.waitForDevice(mmc.getShutterDevice());

gui.message("Create main window");
MaarsMainDialog md = null;
try {
	//md = new MaarsMainDialog(gui, mmc, "/Users/theoli89/Documents/MAARS/MaarsLib/");
	//md = new MaarsMainDialog(gui, mmc, "/home/tong/Documents/code/MAARS/MaarsLib/");
	md = new MaarsMainDialog(gui, mmc, "D:/Data/Tong/MAARS/MaarsLib/");
} catch (IOException e) {
	gui.message("Error");
}

gui.message("Show main window");

md.show();

while(md.isVisible()) {
	gui.sleep(1000);
}

if(md.isOkClicked()) {
	start = System.currentTimeMillis();
	gui.message("start "+start);
	AllMaarsParameters param = null;
	autofocus = gui.getAutofocus();
	param = md.getParameters();
	mmc.setOriginXY(mmc.getXYStageDevice());
	int nbXField = param
						.getParametersAsJsonObject()
						.get(AllMaarsParameters.EXPLORATION_PARAMETERS)
						.getAsJsonObject()
						.get(AllMaarsParameters.X_FIELD_NUMBER)
						.getAsInt();
	int nbYField = param
						.getParametersAsJsonObject()
						.get(AllMaarsParameters.EXPLORATION_PARAMETERS)
						.getAsJsonObject()
						.get(AllMaarsParameters.Y_FIELD_NUMBER)
						.getAsInt();
	
	gui.message("nb x field "+nbXField+" nb y field "+nbYField);

	if (nbXField * nbYField != 0){
	ExplorationXYPositions explo = new ExplorationXYPositions(nbXField,
													nbYField,
													(double) mmc.getImageWidth()*calibration,
													(double) mmc.getImageHeight()*calibration);

	for (int i = 0; i < explo.length(); i++) {
		gui.message("x : "+explo.getX(i)+" y : "+explo.getY(i));
		double xPos = explo.getX(i);
		double yPos = explo.getY(i);
		
		gui.setXYStagePosition(xPos,yPos);
		
		MaarsAcquisitionForSegmentation mas = new MaarsAcquisitionForSegmentation(md,
				xPos,
				yPos);

		mmc.waitForDevice(mmc.getXYStageDevice());

		autofocus.fullFocus();

		HashMap params = mas.getParametersFromConf(param);
		mas.setParameters(params);
		mas.acquire(false);

		MaarsSegmentation ms = new MaarsSegmentation(param, mas.getPathToMovie()+"/MMStack_Pos0.ome.tif");
		ms.segmentation();
		
		if(!ms.noRoiDetected()){
			MaarsFluoAnalysis mfa = new MaarsFluoAnalysis(param, ms.getSegmentationObject());
			MaarsAcquisitionMitosis mmad = new MaarsAcquisitionMitosis(md, mfa, xPos, yPos);
			
			
			MaarsAcquisitionForFluoAnalysis mafa = new MaarsAcquisitionForFluoAnalysis(md,
															xPos,
															yPos,
															mfa.getSetOfCells());
		if(param
			.getParametersAsJsonObject()
			.get(AllMaarsParameters.FLUO_ANALYSIS_PARAMETERS)
			.getAsJsonObject()
			.get(AllMaarsParameters.FIND_BEST_MITOSIS_IN_FIELD)
			.getAsBoolean()) {
			String acqNameFluo = "/movie_X"
				+Math.round(xPos)
				+"_Y"+Math.round(yPos)
				+"_FLUO";
			int timeInterval = param.getParametersAsJsonObject()
					.get(AllMaarsParameters.MITOSIS_MOVIE_PARAMETERS)
					.getAsJsonObject().get(AllMaarsParameters.TIME_INTERVAL)
					.getAsInt();
			double startTime = System.currentTimeMillis();
			int frame = 0;
			double timeLimit = param.getParametersAsJsonObject()
					.get(AllMaarsParameters.MITOSIS_MOVIE_PARAMETERS)
					.getAsJsonObject()
					.get(AllMaarsParameters.END_MOVIE_CONDITIONS)
					.getAsJsonObject().get(AllMaarsParameters.VALUES)
					.getAsJsonObject().get(AllMaarsParameters.TIME_LIMIT)
					.getAsDouble() * 60 * 1000;
			while (System.currentTimeMillis() - startTime <= timeLimit)
				{
					String fluoFolder = mas.getPathToMovie()+"_FLUO";
					File dir = new File(fluoFolder);
					String acqNameFluo = fluoFolder+ "/" + frame;
					dir.mkdirs();
					double beginAcq = System.currentTimeMillis();
					ImagePlus fluoImage = mafa.acquire(false, acqNameFluo);
					mfa.analyzeEntireFieldNoReturn(fluoImage, mas.getPathToMovie()+"_FLUO", frame);
					mfa.getSetOfCells().closeRoiManager();
					frame++;
					double acqTook = System.currentTimeMillis() - beginAcq;
					gui.sleep((long) (timeInterval - acqTook));			
				}																		
		}else {
			int frame = 0;
			String fluoFolder = mas.getPathToMovie()+"_FLUO";
			File dir = new File(fluoFolder);
			String acqNameFluo = fluoFolder+ "/" + frame;
			dir.mkdirs();
			ImagePlus fluoImage = mafa.acquire(false, acqNameFluo);
			fluoImage.show();
			mfa.analyzeEntireFieldNoReturn(fluoImage, fluoFolder, frame);
			fluoImage.close();
			acqNameFluo = null;
			fluoImage = null;
		}
		if (param.getParametersAsJsonObject()
					.get(AllMaarsParameters.FLUO_ANALYSIS_PARAMETERS)
					.getAsJsonObject()
					.get(AllMaarsParameters.SAVE_FLUORESCENT_MOVIES)
					.getAsBoolean()) {
				mfa.saveCroppedImgs();
			}
		// close roi manager
		mfa.getSetOfCells().closeRoiManager();
		mas.setParameters(params);
		}

	}

	mmc.setAutoShutter(true);
	mmc.waitForDevice(mmc.getShutterDevice());
	gui.message("end "+System.currentTimeMillis());
	gui.message("it took "+(System.currentTimeMillis()-start));
	gui.message("DONE.");
	}else{
		gui.message("Session aborted, 0 field to analyse");
	}
	}else{
		gui.message("Session aborted, click 'OK' to start analyse.");
}
